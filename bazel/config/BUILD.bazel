load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")

package(default_visibility = ["//visibility:public"])

# PICO_BAZEL_CONFIG: PICO_BOARD, The board name being built for, type=string, default=pico, group=build
string_flag(
    name = "PICO_BOARD",
    build_setting_default = "pico",
)

# PICO_BAZEL_CONFIG: PICO_BARE_METAL, Flag to exclude anything except base headers from the build, type=bool, default=0, group=build
bool_flag(
    name = "PICO_BARE_METAL",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_NO_GC_SECTIONS, Disable -ffunction-sections -fdata-sections and --gc-sections, type=bool, default=0, advanced=true, group=pico_standard_link
bool_flag(
    name = "PICO_NO_GC_SECTIONS",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_DEFAULT_BOOT_STAGE2_FILE, Boot stage 2 file to use; this should point to a filegroup with the .S file to use, group=build
label_flag(
    name = "PICO_DEFAULT_BOOT_STAGE2_FILE",
    build_setting_default = "//src/rp2_common/boot_stage2:build_selected_boot2",
)

# PICO_BAZEL_CONFIG: PICO_DEFAULT_BOOT_STAGE2, Simpler alternative to specifying PICO_DEFAULT_BOOT_STAGE2_FILE where the file is src/rp2_common/boot_stage2/{PICO_DEFAULT_BOOT_STAGE2}.S, default=compile_time_choice, group=build
string_flag(
    name = "PICO_DEFAULT_BOOT_STAGE2",
    build_setting_default = "compile_time_choice",
)

# PICO_BAZEL_CONFIG: PICO_CXX_ENABLE_EXCEPTIONS, Enabled CXX exception handling, type=bool, default=0, group=pico_cxx_options
bool_flag(
    name = "PICO_CXX_ENABLE_EXCEPTIONS",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_CXX_ENABLE_RTTI, Enabled CXX rtti, type=bool, default=0, group=pico_cxx_options
bool_flag(
    name = "PICO_CXX_ENABLE_RTTI",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_CXX_ENABLE_CXA_ATEXIT, Enabled cxa-atexit, type=bool, default=0, group=pico_cxx_options
bool_flag(
    name = "PICO_CXX_ENABLE_CXA_ATEXIT",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_STDIO_UART, OPTION: Globally enable stdio UART, default=1, group=pico_stdlib
bool_flag(
    name = "PICO_STDIO_UART",
    build_setting_default = True,
)

# PICO_BAZEL_CONFIG: PICO_STDIO_USB, OPTION: Globally enable stdio USB, default=0, group=pico_stdlib
bool_flag(
    name = "PICO_STDIO_USB",
    build_setting_default = False,
)

# PICO_BAZEL_CONFIG: PICO_STDIO_SEMIHOSTING, OPTION: Globally enable stdio semihosting, default=0, group=pico_stdlib
bool_flag(
    name = "PICO_STDIO_SEMIHOSTING",
    build_setting_default = False,
)

# This should always point to a cc_library that provides
# a "pico_config_extra_headers.h".
label_flag(
    name = "pico_config_extra_headers",
    build_setting_default = ":no_extra_headers",
)

# This should always point to a cc_library that provides
# a "pico_config_platform_headers.h".
label_flag(
    name = "pico_config_platform_headers",
    build_setting_default = ":no_platform_headers",
)

# This should always point to a cc_library that defines PICO_CONFIG_HEADER and
# any other defines that should be applied when building the SDK.
label_flag(
    name = "pico_config_header",
    build_setting_default = "//src/boards:default",
)

genrule(
    name = "empty_extra_headers_file",
    outs = ["generated_include/pico_config_extra_headers.h"],
    cmd = "echo > $@",
    cmd_bat = "copy NUL $@",
    visibility = ["//visibility:private"],
)

genrule(
    name = "empty_platform_headers_file",
    outs = ["generated_include/pico_config_platform_headers.h"],
    cmd = "echo > $@",
    cmd_bat = "copy NUL $@",
    visibility = ["//visibility:private"],
)

cc_library(
    name = "no_extra_headers",
    hdrs = ["generated_include/pico_config_extra_headers.h"],
    includes = ["generated_include"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "no_platform_headers",
    hdrs = ["generated_include/pico_config_platform_headers.h"],
    includes = ["generated_include"],
    visibility = ["//visibility:private"],
)
