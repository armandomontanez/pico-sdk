package(default_visibility = ["//visibility:public"])

genrule(
    name = "version_header",
    srcs = [
        "//:pico_sdk_version.cmake",
        "include/pico/version.h.in",
    ],
    outs = ["generated_include/pico/version.h"],
    cmd = "$(location //bazel:parse_version) $(location //:pico_sdk_version.cmake)  --template=$(location include/pico/version.h.in) > $@",
    cmd_bat = "$(location //bazel:parse_version) $(location //:pico_sdk_version.cmake)  --template=$(location include/pico/version.h.in) > $@",
    tools = ["//bazel:parse_version"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "version",
    hdrs = ["generated_include/pico/version.h"],
    includes = ["generated_include"],
)

alias(
    name = "platform_defs",
    actual = select({
        "//bazel/constraint:host": "//src/host/pico_platform:platform_defs",
        "//bazel/constraint:rp2": "//src/rp2_common/pico_platform:platform_defs",
    }),
)

alias(
    name = "pico_platform",
    actual = select({
        "//bazel/constraint:host": "//src/host/pico_platform:pico_platform",
        "//bazel/constraint:rp2": "//src/rp2_common/pico_platform:pico_platform",
    }),
)

cc_library(
    name = "pico_base_interface",
    hdrs = [
        "include/pico.h",
        "include/pico/assert.h",
        "include/pico/config.h",
        "include/pico/error.h",
        "include/pico/types.h",
    ],
    includes = ["include"],

    # Be extra careful about who references this for now.
    # It's generally safe for anything that circularly depends on
    # //src/common/pico_base:pico_base to be added to this allowlist because
    # that implicitly means the transitive dependencies of pico_base will get
    # linked in.
    visibility = [
        "//src/common/pico_binary_info:__pkg__",
        "//src/common/pico_sync:__pkg__",
        "//src/common/pico_time:__pkg__",
        "//src/common/pico_util:__pkg__",
        "//src/host/pico_platform:__pkg__",
        "//src/rp2_common/boot_stage2:__pkg__",
        "//src/rp2_common/hardware_claim:__pkg__",
        "//src/rp2_common/hardware_clocks:__pkg__",
        "//src/rp2_common/hardware_gpio:__pkg__",
        "//src/rp2_common/hardware_irq:__pkg__",
        "//src/rp2_common/hardware_pll:__pkg__",
        "//src/rp2_common/hardware_resets:__pkg__",
        "//src/rp2_common/hardware_sync:__pkg__",
        "//src/rp2_common/hardware_timer:__pkg__",
        "//src/rp2_common/hardware_watchdog:__pkg__",
        "//src/rp2_common/hardware_xosc:__pkg__",
        "//src/rp2_common/pico_bootrom:__pkg__",
        "//src/rp2_common/pico_platform:__pkg__",
        "//src/rp2_common/pico_printf:__pkg__",
        "//src/rp2_common/pico_runtime:__pkg__",
        "//src/rp2_common/pico_standard_link:__pkg__",
    ],
    deps = [
        ":version",
        "//bazel:generate_config_header",
        "//bazel/config:pico_config_header",
    ],
)

cc_library(
    name = "pico_base",
    deps = [
        # :pico_platform creates circular dependencies, so break them
        # via an intermediate.
        ":pico_platform",
        ":pico_base_interface",
        "//src/rp2_common/cmsis:cmsis_core",
        "//src/rp2_common/boot_stage2",
        "//src/rp2_common/pico_bootrom",
        "//src/rp2_common/pico_runtime",
        "//src/rp2_common/pico_standard_link",
    ],
)
