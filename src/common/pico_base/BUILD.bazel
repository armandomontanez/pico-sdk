package(default_visibility = ["//visibility:public"])

genrule(
    name = "version_header",
    outs = ["generated_include/pico/version.h"],
    srcs = [
        "//:pico_sdk_version.cmake",
        "include/pico/version.h.in",
    ],
    cmd = "$(location //bazel:parse_version) $(location //:pico_sdk_version.cmake)  --template=$(location include/pico/version.h.in) > $@",
    cmd_bat = "$(location //bazel:parse_version) $(location //:pico_sdk_version.cmake)  --template=$(location include/pico/version.h.in) > $@",
    tools = ["//bazel:parse_version"],
    visibility = ["//visibility:private"],
)

cc_library(
    name = "version",
    includes = ["generated_include"],
    hdrs = ["generated_include/pico/version.h"],
)

alias(
    name = "platform_defs",
    actual = select({
        "//bazel/constraint:host": "//src/host/pico_platform:platform_defs",
        "//bazel/constraint:rp2": "//src/rp2_common/pico_platform:platform_defs",
    }),
)

alias(
    name = "pico_platform",
    actual = select({
        "//bazel/constraint:host": "//src/host/pico_platform:pico_platform",  
        "//bazel/constraint:rp2": "//src/rp2_common/pico_platform:pico_platform",
    }),
)

cc_library(
    name = "pico_base_interface",
    includes = ["include"],
    deps = [
        ":version",
        "//bazel:generate_config_header",
        "//bazel/config:board_defines",
    ],
    hdrs = [
        "include/pico.h",
        "include/pico/assert.h",
        "include/pico/config.h",
        "include/pico/error.h",
        "include/pico/types.h",
    ],

    # Be extra careful about who references this for now.
    visibility = [
        "//src/host/pico_platform:__pkg__",
        "//src/rp2_common/pico_platform:__pkg__",
    ],
)

cc_library(
    name = "pico_base",
    deps = [
        # :pico_platform creates circular dependencies, so break them
        # via an intermediate.
        ":pico_platform",
        ":pico_base_interface",
    ]
)
